# Default Logger Setup
#
#    root  (log level: NOTSET)
#    |  |
#    |  H-<rootHandler> -> stdout (script editor)
#    |  
#    |
#    +-- pymel (log level: INFO)
#        |
#        +--[ pymel.general, etc...
#        |
#        +--[ pymel.core
#           .
#           .
#           +---[ pymel.core.factories (log level: INFO)
#                         |
#                         H-<consoleHandler> -> __stdout__ (console)
#
# This is the default pymel configuration file.
# Pymel determines which configuration file to use by:
#    1. If a 'PYMEL_CONF' environment variable is defined, and the value it contains is an
#         existing file, this file is used
#    2. If a 'pymel.conf' file exists in the $HOME directory, this is used
#    3. Otherwise, the 'pymel.conf' file in the root pymel directory is used.

[loggers]
keys=root,pymel,pymel_internal_factories

[formatters]
keys=pymelFormatter

[handlers]
keys=consoleHandler,fileLogger

[logger_root]
## Setup the logging module's global root logger to output to the script-editor
level=NOTSET
handlers=
remove_existing_handlers=False

[logger_pymel]
## Set the root 'pymel' logger to INFO mode
## Setting PYMEL_LOGLEVEL environment variable will override this
level=INFO
qualname=pymel
handlers=

[logger_pymel_internal_factories]
## A special logger for the 'core.factories' module that outputs only to the console handler
level=WARNING
qualname=pymel.internal.factories
handlers=consoleHandler
propagate=0

[formatter_pymelFormatter]
format=%(name)s : %(levelname)s : %(message)s
class=logging.Formatter


[handler_consoleHandler]
## This will stream to the shell (in Linux) or the Output window (in Windows)
class=StreamHandler
level=NOTSET
formatter=pymelFormatter
args=(sys.__stdout__,)

[handler_fileLogger]
## This will output to a file, pymel.log
class=FileHandler
level=DEBUG
formatter=pymelFormatter
args=(os.path.expanduser('~/pymel.log'), 'w')

[pymel]
## The path_class option can be set to the name of an alternate base class for the Path class.
## It must include the module name where the class can be found
#path_class=luma.Filepath

## uncomment to allow instantiation of non-existent PyNode objects. this option will probably
## be removed in future versions and is offered to provide a grace period for those upgrading from
## pymel 0.7. 
#0_7_compatibility_mode=on

## By default, in a standalone interpreter, pymel will attempt to do a full initialization of your MEL environment, such
## as sourcing userPrefs.mel, pluginPrefs.mel, and userSetup.mel.  
## If this is undesirable, uncomment this option.  Alternately, you can set the environment variable PYMEL_SKIP_MEL_INIT
## to any value.
#skip_mel_init=on


